@using System
@using GeniusSports.Signalr.Hubs.TypeScriptGenerator.Models
@model GeniusSports.Signalr.Hubs.TypeScriptGenerator.Models.TypesModel

/// Autogenerated at @Model.LastGenerated by https://github.com/geniussportsgroup/Signalr.Hubs.TypeScriptGenerator
/// <reference path="../signalr/index.d.ts" />
/// <reference path="../jquery/index.d.ts" />

// Hubs
interface SignalR
{
	@foreach (TypeInfo type in Model.Hubs)
	{
	<text>@(type.Name) : @(type.TypeScriptType);</text>
	}
}

// Service contracts
@foreach (ServiceInfo serviceInfo in Model.ServiceContracts){
<text>
declare module @serviceInfo.ModuleName
{

	interface @serviceInfo.InterfaceName
	{
        server : @Raw(serviceInfo.ServerTypeFullNamespace);
        @if (serviceInfo.ClientType == "any")
        {
            @Raw("        // Hub does not have a Client Interface as a generic argument - it is recommend to add one" + Environment.NewLine);
        }
        client : @Raw(serviceInfo.ClientType);
    }

	interface @serviceInfo.ServerType
	{
		@foreach (FunctionDetails functionDetails in serviceInfo.ServerFunctions)
		{
		<text>@Raw(functionDetails.Name + functionDetails.Arguments) : @Raw(functionDetails.ReturnType);</text>
		}
	}
}
</text>
}

// Clients
@foreach (ClientInfo clientInfo in Model.Clients){
<text>
declare module @clientInfo.ModuleName
{
	interface @clientInfo.InterfaceName
	{
		@foreach (FunctionDetails functionDetails in clientInfo.FunctionDetails)
		{
		<text>@Raw(functionDetails.Name) : @Raw(functionDetails.Arguments) => void;</text>
		}
	}
}
</text>
}

// Data contracts
@foreach (DataContractInfo dataContractInfo in Model.DataContracts){
<text>
declare module @dataContractInfo.ModuleName
{
	interface @dataContractInfo.InterfaceName
	{
		@foreach (TypeInfo property in dataContractInfo.Properties)
		{
		<text>@Raw(property.Name) : @Raw(property.TypeScriptType);</text>
		}
	}
}
</text>
}

// Enums
@foreach (EnumInfo enumInfo in Model.Enums){
<text>
declare module @enumInfo.ModuleName
{
	enum @enumInfo.InterfaceName
	{
		@foreach (TypeInfo property in enumInfo.Properties)
		{
		<text>@Raw(property.Name) = @Raw(property.TypeScriptType),</text>
		}
	}
}
</text>
}